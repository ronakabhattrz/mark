=begin
#CCITS Service Profile

#The **Service Profile** service is used to read and update the following details of the given  Service Profile. - Address - ServiceName(Read Only)     - CCSApproval(Read Only) - Contact   - Declaration   - ExternalManagement   - Fees  - Financial  - OperationAcrossBorders   - Other(Update Only)  - ServiceLocationOfRecord - ServiceStopOperating((Update Only)  - ServiceStopOperatingSale(Update Only) - ServiceTemporarilyCeasing  - SupportingDocuments  - Trustee  

OpenAPI spec version: 2.04

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module AccountManagementService
  class ApprovalCondition
	include ActiveModel::Model
    # Code of Approval Condition
    attr_accessor :code

    # Start Date of Condition
    attr_accessor :start_date

    # End Date of Condition
    attr_accessor :end_date

    # Notification timeframe <Number of days>
    attr_accessor :notification_timeframe

    # Condition Reason
    attr_accessor :condition_reason

    # Condition Reason Text
    attr_accessor :condition_reason_text

    # Condition to apply <free text>
    attr_accessor :condition_to_apply

    # Place limit to apply <Number>
    attr_accessor :place_limit_to_apply

    # Number of Educators per 1 co-ordinator <Number>
    attr_accessor :number_of_educators_per1_coordinator

    # Educators limit <Number>
    attr_accessor :educator_limit

    # <List of regions (free text)>
    attr_accessor :regions

    # Number of home visit <Number>
    attr_accessor :number_of_home_visit

    # Percentage or Actual Number
    attr_accessor :number_or_percentage_home_visit_type

    # Number/Percentage of educatory homes that require visits <1-100 or 1%-100%>
    attr_accessor :number_or_percentage_home_visit

    # Frequency of visit <Frequency type>
    attr_accessor :frequency_of_visit

    attr_accessor :personnels

    attr_accessor :records_to_be_provided_set

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'code' => :'code',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'notification_timeframe' => :'notificationTimeframe',
        :'condition_reason' => :'conditionReason',
        :'condition_reason_text' => :'conditionReasonText',
        :'condition_to_apply' => :'conditionToApply',
        :'place_limit_to_apply' => :'placeLimitToApply',
        :'number_of_educators_per1_coordinator' => :'numberOfEducatorsPer1Coordinator',
        :'educator_limit' => :'educatorLimit',
        :'regions' => :'regions',
        :'number_of_home_visit' => :'numberOfHomeVisit',
        :'number_or_percentage_home_visit_type' => :'numberOrPercentageHomeVisitType',
        :'number_or_percentage_home_visit' => :'numberOrPercentageHomeVisit',
        :'frequency_of_visit' => :'frequencyOfVisit',
        :'personnels' => :'Personnels',
        :'records_to_be_provided_set' => :'RecordsToBeProvidedSet'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'code' => :'String',
        :'start_date' => :'String',
        :'end_date' => :'String',
        :'notification_timeframe' => :'Integer',
        :'condition_reason' => :'String',
        :'condition_reason_text' => :'String',
        :'condition_to_apply' => :'String',
        :'place_limit_to_apply' => :'Integer',
        :'number_of_educators_per1_coordinator' => :'Integer',
        :'educator_limit' => :'Integer',
        :'regions' => :'String',
        :'number_of_home_visit' => :'Integer',
        :'number_or_percentage_home_visit_type' => :'String',
        :'number_or_percentage_home_visit' => :'String',
        :'frequency_of_visit' => :'String',
        :'personnels' => :'RelatedCollectionPersonnel',
        :'records_to_be_provided_set' => :'RelatedCollectionAccountManagementRecordsToBeProvided'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'endDate')
        self.end_date = attributes[:'endDate']
      end

      if attributes.has_key?(:'notificationTimeframe')
        self.notification_timeframe = attributes[:'notificationTimeframe']
      end

      if attributes.has_key?(:'conditionReason')
        self.condition_reason = attributes[:'conditionReason']
      end

      if attributes.has_key?(:'conditionReasonText')
        self.condition_reason_text = attributes[:'conditionReasonText']
      end

      if attributes.has_key?(:'conditionToApply')
        self.condition_to_apply = attributes[:'conditionToApply']
      end

      if attributes.has_key?(:'placeLimitToApply')
        self.place_limit_to_apply = attributes[:'placeLimitToApply']
      end

      if attributes.has_key?(:'numberOfEducatorsPer1Coordinator')
        self.number_of_educators_per1_coordinator = attributes[:'numberOfEducatorsPer1Coordinator']
      end

      if attributes.has_key?(:'educatorLimit')
        self.educator_limit = attributes[:'educatorLimit']
      end

      if attributes.has_key?(:'regions')
        self.regions = attributes[:'regions']
      end

      if attributes.has_key?(:'numberOfHomeVisit')
        self.number_of_home_visit = attributes[:'numberOfHomeVisit']
      end

      if attributes.has_key?(:'numberOrPercentageHomeVisitType')
        self.number_or_percentage_home_visit_type = attributes[:'numberOrPercentageHomeVisitType']
      end

      if attributes.has_key?(:'numberOrPercentageHomeVisit')
        self.number_or_percentage_home_visit = attributes[:'numberOrPercentageHomeVisit']
      end

      if attributes.has_key?(:'frequencyOfVisit')
        self.frequency_of_visit = attributes[:'frequencyOfVisit']
      end

      if attributes.has_key?(:'Personnels')
        self.personnels = attributes[:'Personnels']
      end

      if attributes.has_key?(:'RecordsToBeProvidedSet')
        self.records_to_be_provided_set = attributes[:'RecordsToBeProvidedSet']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@code.nil? && @code.to_s.length > 6
        invalid_properties.push('invalid value for "code", the character length must be smaller than or equal to 6.')
      end

      if !@start_date.nil? && @start_date.to_s.length > 10
        invalid_properties.push('invalid value for "start_date", the character length must be smaller than or equal to 10.')
      end

      if !@end_date.nil? && @end_date.to_s.length > 10
        invalid_properties.push('invalid value for "end_date", the character length must be smaller than or equal to 10.')
      end

      if !@condition_reason.nil? && @condition_reason.to_s.length > 6
        invalid_properties.push('invalid value for "condition_reason", the character length must be smaller than or equal to 6.')
      end

      if !@condition_reason_text.nil? && @condition_reason_text.to_s.length > 1000
        invalid_properties.push('invalid value for "condition_reason_text", the character length must be smaller than or equal to 1000.')
      end

      if !@condition_to_apply.nil? && @condition_to_apply.to_s.length > 1000
        invalid_properties.push('invalid value for "condition_to_apply", the character length must be smaller than or equal to 1000.')
      end

      if !@regions.nil? && @regions.to_s.length > 1000
        invalid_properties.push('invalid value for "regions", the character length must be smaller than or equal to 1000.')
      end

      if !@number_or_percentage_home_visit_type.nil? && @number_or_percentage_home_visit_type.to_s.length > 6
        invalid_properties.push('invalid value for "number_or_percentage_home_visit_type", the character length must be smaller than or equal to 6.')
      end

      if !@number_or_percentage_home_visit.nil? && @number_or_percentage_home_visit.to_s.length > 3
        invalid_properties.push('invalid value for "number_or_percentage_home_visit", the character length must be smaller than or equal to 3.')
      end

      if !@frequency_of_visit.nil? && @frequency_of_visit.to_s.length > 60
        invalid_properties.push('invalid value for "frequency_of_visit", the character length must be smaller than or equal to 60.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@code.nil? && @code.to_s.length > 6
      return false if !@start_date.nil? && @start_date.to_s.length > 10
      return false if !@end_date.nil? && @end_date.to_s.length > 10
      return false if !@condition_reason.nil? && @condition_reason.to_s.length > 6
      return false if !@condition_reason_text.nil? && @condition_reason_text.to_s.length > 1000
      return false if !@condition_to_apply.nil? && @condition_to_apply.to_s.length > 1000
      return false if !@regions.nil? && @regions.to_s.length > 1000
      return false if !@number_or_percentage_home_visit_type.nil? && @number_or_percentage_home_visit_type.to_s.length > 6
      return false if !@number_or_percentage_home_visit.nil? && @number_or_percentage_home_visit.to_s.length > 3
      return false if !@frequency_of_visit.nil? && @frequency_of_visit.to_s.length > 60
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if !code.nil? && code.to_s.length > 6
        fail ArgumentError, 'invalid value for "code", the character length must be smaller than or equal to 6.'
      end

      @code = code
    end

    # Custom attribute writer method with validation
    # @param [Object] start_date Value to be assigned
    def start_date=(start_date)
      if !start_date.nil? && start_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "start_date", the character length must be smaller than or equal to 10.'
      end

      @start_date = start_date
    end

    # Custom attribute writer method with validation
    # @param [Object] end_date Value to be assigned
    def end_date=(end_date)
      if !end_date.nil? && end_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "end_date", the character length must be smaller than or equal to 10.'
      end

      @end_date = end_date
    end

    # Custom attribute writer method with validation
    # @param [Object] condition_reason Value to be assigned
    def condition_reason=(condition_reason)
      if !condition_reason.nil? && condition_reason.to_s.length > 6
        fail ArgumentError, 'invalid value for "condition_reason", the character length must be smaller than or equal to 6.'
      end

      @condition_reason = condition_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] condition_reason_text Value to be assigned
    def condition_reason_text=(condition_reason_text)
      if !condition_reason_text.nil? && condition_reason_text.to_s.length > 1000
        fail ArgumentError, 'invalid value for "condition_reason_text", the character length must be smaller than or equal to 1000.'
      end

      @condition_reason_text = condition_reason_text
    end

    # Custom attribute writer method with validation
    # @param [Object] condition_to_apply Value to be assigned
    def condition_to_apply=(condition_to_apply)
      if !condition_to_apply.nil? && condition_to_apply.to_s.length > 1000
        fail ArgumentError, 'invalid value for "condition_to_apply", the character length must be smaller than or equal to 1000.'
      end

      @condition_to_apply = condition_to_apply
    end

    # Custom attribute writer method with validation
    # @param [Object] regions Value to be assigned
    def regions=(regions)
      if !regions.nil? && regions.to_s.length > 1000
        fail ArgumentError, 'invalid value for "regions", the character length must be smaller than or equal to 1000.'
      end

      @regions = regions
    end

    # Custom attribute writer method with validation
    # @param [Object] number_or_percentage_home_visit_type Value to be assigned
    def number_or_percentage_home_visit_type=(number_or_percentage_home_visit_type)
      if !number_or_percentage_home_visit_type.nil? && number_or_percentage_home_visit_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "number_or_percentage_home_visit_type", the character length must be smaller than or equal to 6.'
      end

      @number_or_percentage_home_visit_type = number_or_percentage_home_visit_type
    end

    # Custom attribute writer method with validation
    # @param [Object] number_or_percentage_home_visit Value to be assigned
    def number_or_percentage_home_visit=(number_or_percentage_home_visit)
      if !number_or_percentage_home_visit.nil? && number_or_percentage_home_visit.to_s.length > 3
        fail ArgumentError, 'invalid value for "number_or_percentage_home_visit", the character length must be smaller than or equal to 3.'
      end

      @number_or_percentage_home_visit = number_or_percentage_home_visit
    end

    # Custom attribute writer method with validation
    # @param [Object] frequency_of_visit Value to be assigned
    def frequency_of_visit=(frequency_of_visit)
      if !frequency_of_visit.nil? && frequency_of_visit.to_s.length > 60
        fail ArgumentError, 'invalid value for "frequency_of_visit", the character length must be smaller than or equal to 60.'
      end

      @frequency_of_visit = frequency_of_visit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          code == o.code &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          notification_timeframe == o.notification_timeframe &&
          condition_reason == o.condition_reason &&
          condition_reason_text == o.condition_reason_text &&
          condition_to_apply == o.condition_to_apply &&
          place_limit_to_apply == o.place_limit_to_apply &&
          number_of_educators_per1_coordinator == o.number_of_educators_per1_coordinator &&
          educator_limit == o.educator_limit &&
          regions == o.regions &&
          number_of_home_visit == o.number_of_home_visit &&
          number_or_percentage_home_visit_type == o.number_or_percentage_home_visit_type &&
          number_or_percentage_home_visit == o.number_or_percentage_home_visit &&
          frequency_of_visit == o.frequency_of_visit &&
          personnels == o.personnels &&
          records_to_be_provided_set == o.records_to_be_provided_set
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [code, start_date, end_date, notification_timeframe, condition_reason, condition_reason_text, condition_to_apply, place_limit_to_apply, number_of_educators_per1_coordinator, educator_limit, regions, number_of_home_visit, number_or_percentage_home_visit_type, number_or_percentage_home_visit, frequency_of_visit, personnels, records_to_be_provided_set].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AccountManagementService.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end

end
