=begin
#CCITS Service Profile

#The **Service Profile** service is used to read and update the following details of the given  Service Profile. - Address - ServiceName(Read Only)     - CCSApproval(Read Only) - Contact   - Declaration   - ExternalManagement   - Fees  - Financial  - OperationAcrossBorders   - Other(Update Only)  - ServiceLocationOfRecord - ServiceStopOperating((Update Only)  - ServiceStopOperatingSale(Update Only) - ServiceTemporarilyCeasing  - SupportingDocuments  - Trustee  

OpenAPI spec version: 2.04

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module AccountManagementService
  class ServiceProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    def serviceprofiles_getlocal(opts = {})
      # ToDo - make this handle non existent files 
      # data, _status_code, _headers = serviceprofiles_get_with_http_info(opts)
      # :return_type => 'Wrapper'
      # We'l get the json file and create a dom
      file = File.open("lib/swaggers/Account_Management_Service/data/#{opts[:ccs_service_id]}.json")
      file_data = file.read
      file.close
      puts file_data.to_s
      stuff = Response.new(file_data, '200') # file_data, '200')
      data = @api_client.deserialize(stuff, 'Wrapper')
      data
    end


    # Get entities from ServiceProfiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter items by following property values,        1. serviceID     2. startDate     3. endDate     
    # @option opts [Array<String>] :expand Expand related entities   -  ChildCarePlaces   -  ServiceName   -  CCSApproval   -  Address   -  Contact   -  Financial   -  Fees   -  Trustee   -  ExternalManagement   -  ExternalManagement/Address   -  ServiceLocationOfRecord   -  ServiceLocationOfRecord/Address   -  ServiceTemporarilyCeasing   -  SupportingDocuments   -  ApprovalConditions   -  ApprovalConditions/Personnels   -  ApprovalConditions/RecordsToBeProvided   -  ACCSCapPercentages
    # @return [Wrapper]
    def serviceprofiles_get(opts = {})
      data, _status_code, _headers = serviceprofiles_get_with_http_info(opts)
      data
    end



    # Get entities from ServiceProfiles
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter Filter items by following property values,        1. serviceID     2. startDate     3. endDate     
    # @option opts [Array<String>] :expand Expand related entities   -  ChildCarePlaces   -  ServiceName   -  CCSApproval   -  Address   -  Contact   -  Financial   -  Fees   -  Trustee   -  ExternalManagement   -  ExternalManagement/Address   -  ServiceLocationOfRecord   -  ServiceLocationOfRecord/Address   -  ServiceTemporarilyCeasing   -  SupportingDocuments   -  ApprovalConditions   -  ApprovalConditions/Personnels   -  ApprovalConditions/RecordsToBeProvided   -  ACCSCapPercentages
    # @return [Array<(Wrapper, Fixnum, Hash)>] Wrapper data, response status code and response headers
    def serviceprofiles_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceProfilesApi.serviceprofiles_get ...'
      end
      if @api_client.config.client_side_validation && opts[:'expand'] && !opts[:'expand'].all? { |item| ['ChildCarePlaces', 'ServiceName', 'CCSApproval', 'Address', 'Contact', 'Financial', 'Fees', 'Trustee', 'ExternalManagement', 'ServiceLocationOfRecord', 'ServiceTemporarilyCeasing', 'SupportingDocuments', 'ApprovalConditions', 'ACCSCapPercentages'].include?(item) }
        fail ArgumentError, 'invalid value for "expand", must include one of ChildCarePlaces, ServiceName, CCSApproval, Address, Contact, Financial, Fees, Trustee, ExternalManagement, ServiceLocationOfRecord, ServiceTemporarilyCeasing, SupportingDocuments, ApprovalConditions, ACCSCapPercentages'
      end
      # resource path
      local_var_path = '/serviceprofiles'

      # query parameters
      query_params = {}
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$expand'] = @api_client.build_collection_param(opts[:'expand'], :csv) if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: 'Wrapper')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceProfilesApi#serviceprofiles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update ServiceProfile's entities
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceProfile] :service_profile New entity
    # @return [CreatedServiceProfile]
    def serviceprofiles_post(opts = {})
      data, _status_code, _headers = serviceprofiles_post_with_http_info(opts)
      data
    end

    # Update ServiceProfile&#39;s entities
    # @param [Hash] opts the optional parameters
    # @option opts [ServiceProfile] :service_profile New entity
    # @return [Array<(CreatedServiceProfile, Fixnum, Hash)>] CreatedServiceProfile data, response status code and response headers
    def serviceprofiles_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceProfilesApi.serviceprofiles_post ...'
      end
      # resource path
      local_var_path = '/serviceprofiles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'service_profile'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: 'CreatedServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceProfilesApi#serviceprofiles_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get entity from ServiceProfiles by key
    # @param service_id Unique identifier of the Service in the system
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :expand Expand related entities   -  ChildCarePlaces   -  ServiceName   -  CCSApproval   -  Address   -  Contact   -  Financial   -  Fees   -  Trustee   -  ExternalManagement   -  ExternalManagement/Address   -  ServiceLocationOfRecord   -  ServiceLocationOfRecord/Address   -  ServiceTemporarilyCeasing   -  SupportingDocuments   -  ApprovalConditions   -  ApprovalConditions/Personnels   -  ApprovalConditions/RecordsToBeProvided   -  ACCSCapPercentages
    # @return [CreatedServiceProfile]
    def serviceprofiles_service_id_get(service_id, opts = {})
      data, _status_code, _headers = serviceprofiles_service_id_get_with_http_info(service_id, opts)
      data
    end

    # Get entity from ServiceProfiles by key
    # @param service_id Unique identifier of the Service in the system
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :expand Expand related entities   -  ChildCarePlaces   -  ServiceName   -  CCSApproval   -  Address   -  Contact   -  Financial   -  Fees   -  Trustee   -  ExternalManagement   -  ExternalManagement/Address   -  ServiceLocationOfRecord   -  ServiceLocationOfRecord/Address   -  ServiceTemporarilyCeasing   -  SupportingDocuments   -  ApprovalConditions   -  ApprovalConditions/Personnels   -  ApprovalConditions/RecordsToBeProvided   -  ACCSCapPercentages
    # @return [Array<(CreatedServiceProfile, Fixnum, Hash)>] CreatedServiceProfile data, response status code and response headers
    def serviceprofiles_service_id_get_with_http_info(service_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceProfilesApi.serviceprofiles_service_id_get ...'
      end
      # verify the required parameter 'service_id' is set
      if @api_client.config.client_side_validation && service_id.nil?
        fail ArgumentError, "Missing the required parameter 'service_id' when calling ServiceProfilesApi.serviceprofiles_service_id_get"
      end
      if @api_client.config.client_side_validation && opts[:'expand'] && !opts[:'expand'].all? { |item| ['ChildCarePlaces', 'ServiceName', 'CCSApproval', 'Address', 'Contact', 'Financial', 'Fees', 'Trustee', 'ExternalManagement', 'ServiceLocationOfRecord', 'ServiceTemporarilyCeasing', 'SupportingDocuments', 'ApprovalConditions', 'ACCSCapPercentages'].include?(item) }
        fail ArgumentError, 'invalid value for "expand", must include one of ChildCarePlaces, ServiceName, CCSApproval, Address, Contact, Financial, Fees, Trustee, ExternalManagement, ServiceLocationOfRecord, ServiceTemporarilyCeasing, SupportingDocuments, ApprovalConditions, ACCSCapPercentages'
      end
      # resource path
      local_var_path = '/serviceprofiles({serviceID})'.sub('{' + 'serviceID' + '}', service_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'$expand'] = @api_client.build_collection_param(opts[:'expand'], :csv) if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: 'CreatedServiceProfile')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceProfilesApi#serviceprofiles_service_id_get\n
                Data: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
