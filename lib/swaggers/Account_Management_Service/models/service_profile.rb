=begin
#CCITS Service Profile

#The **Service Profile** service is used to read and update the following details of the given  Service Profile. - Address - ServiceName(Read Only)     - CCSApproval(Read Only) - Contact   - Declaration   - ExternalManagement   - Fees  - Financial  - OperationAcrossBorders   - Other(Update Only)  - ServiceLocationOfRecord - ServiceStopOperating((Update Only)  - ServiceStopOperatingSale(Update Only) - ServiceTemporarilyCeasing  - SupportingDocuments  - Trustee  

OpenAPI spec version: 2.04

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module AccountManagementService
  class ServiceProfile
	include ActiveModel::Model
    # Unique identifier of the Service in the system
    attr_accessor :service_id

    # Start date for which to retrieve Service details
    attr_accessor :start_date

    # End date for which to retrieve Service details
    attr_accessor :end_date

    # Name of the Service
    attr_accessor :service_name

    attr_accessor :service_name_start_date

    attr_accessor :service_name_end_date

    # Primary Service Type for this CCS Service
    attr_accessor :service_type

    # Commencement Date
    attr_accessor :commencement_date

    # ACECQA Service Approval Number
    attr_accessor :acecqa_registration_code

    # Reason for the Service not obtaining an ACECQA Approval Numb
    attr_accessor :acecq_aexemptionreason

    # Numb. of wks/yr the srvc be opn for providing Child care
    attr_accessor :number_of_weeks_per_year

    # Date of Event for the update
    attr_accessor :number_of_weeks_per_year_date_of_event

    attr_accessor :child_care_places

    attr_accessor :service_name

    attr_accessor :ccs_approval

    attr_accessor :address

    attr_accessor :contact

    attr_accessor :financial

    attr_accessor :fees

    attr_accessor :trustee

    attr_accessor :external_management

    attr_accessor :service_location_of_record

    attr_accessor :service_stop_operating

    attr_accessor :service_temporarily_ceasing

    attr_accessor :notifications

    attr_accessor :serious_incident

    attr_accessor :supporting_documents

    attr_accessor :approval_conditions

    attr_accessor :accs_cap_percentage

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'service_id' => :'serviceID',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'service_name' => :'serviceName',
        :'service_name_start_date' => :'serviceNameStartDate',
        :'service_name_end_date' => :'serviceNameEndDate',
        :'service_type' => :'serviceType',
        :'commencement_date' => :'commencementDate',
        :'acecqa_registration_code' => :'ACECQARegistrationCode',
        :'acecq_aexemptionreason' => :'ACECQAexemptionreason',
        :'number_of_weeks_per_year' => :'numberOfWeeksPerYear',
        :'number_of_weeks_per_year_date_of_event' => :'numberOfWeeksPerYearDateOfEvent',
        :'child_care_places' => :'ChildCarePlaces',
        :'service_name' => :'ServiceName',
        :'ccs_approval' => :'CCSApproval',
        :'address' => :'Address',
        :'contact' => :'Contact',
        :'financial' => :'Financial',
        :'fees' => :'Fees',
        :'trustee' => :'Trustee',
        :'external_management' => :'ExternalManagement',
        :'service_location_of_record' => :'ServiceLocationOfRecord',
        :'service_stop_operating' => :'ServiceStopOperating',
        :'service_temporarily_ceasing' => :'ServiceTemporarilyCeasing',
        :'notifications' => :'Notifications',
        :'serious_incident' => :'SeriousIncident',
        :'supporting_documents' => :'SupportingDocuments',
        :'approval_conditions' => :'ApprovalConditions',
        :'accs_cap_percentage' => :'ACCSCapPercentage'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'service_id' => :'String',
        :'start_date' => :'String',
        :'end_date' => :'String',
        :'service_name' => :'String',
        :'service_name_start_date' => :'String',
        :'service_name_end_date' => :'String',
        :'service_type' => :'String',
        :'commencement_date' => :'String',
        :'acecqa_registration_code' => :'String',
        :'acecq_aexemptionreason' => :'String',
        :'number_of_weeks_per_year' => :'Integer',
        :'number_of_weeks_per_year_date_of_event' => :'String',
        :'child_care_places' => :'RelatedCollectionChildCarePlaces',
        :'service_name' => :'RelatedCollectionAccountManagementServiceName',
        :'ccs_approval' => :'RelatedCollectionCCSApproval',
        :'address' => :'RelatedCollectionAddress',
        :'contact' => :'RelatedCollectionContact',
        :'financial' => :'Financial',
        :'fees' => :'RelatedCollectionFee',
        :'trustee' => :'RelatedCollectionTrustee',
        :'external_management' => :'RelatedCollectionExternalManagement',
        :'service_location_of_record' => :'RelatedCollectionServiceLocationOfRecord',
        :'service_stop_operating' => :'ServiceStopOperating',
        :'service_temporarily_ceasing' => :'RelatedCollectionServiceTemporarilyCeasing',
        :'notifications' => :'Notifications',
        :'serious_incident' => :'SeriousIncident',
        :'supporting_documents' => :'RelatedCollectionSupportingDocument',
        :'approval_conditions' => :'RelatedCollectionApprovalCondition',
        :'accs_cap_percentage' => :'RelatedCollectionACCSCapPercentage'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'serviceID')
        self.service_id = attributes[:'serviceID']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'endDate')
        self.end_date = attributes[:'endDate']
      end

      if attributes.has_key?(:'serviceName')
        self.service_name = attributes[:'serviceName']
      end

      if attributes.has_key?(:'serviceNameStartDate')
        self.service_name_start_date = attributes[:'serviceNameStartDate']
      end

      if attributes.has_key?(:'serviceNameEndDate')
        self.service_name_end_date = attributes[:'serviceNameEndDate']
      end

      if attributes.has_key?(:'serviceType')
        self.service_type = attributes[:'serviceType']
      end

      if attributes.has_key?(:'commencementDate')
        self.commencement_date = attributes[:'commencementDate']
      end

      if attributes.has_key?(:'ACECQARegistrationCode')
        self.acecqa_registration_code = attributes[:'ACECQARegistrationCode']
      end

      if attributes.has_key?(:'ACECQAexemptionreason')
        self.acecq_aexemptionreason = attributes[:'ACECQAexemptionreason']
      end

      if attributes.has_key?(:'numberOfWeeksPerYear')
        self.number_of_weeks_per_year = attributes[:'numberOfWeeksPerYear']
      end

      if attributes.has_key?(:'numberOfWeeksPerYearDateOfEvent')
        self.number_of_weeks_per_year_date_of_event = attributes[:'numberOfWeeksPerYearDateOfEvent']
      end

      if attributes.has_key?(:'ChildCarePlaces')
        self.child_care_places = attributes[:'ChildCarePlaces']
      end

      if attributes.has_key?(:'ServiceName')
        self.service_name = attributes[:'ServiceName']
      end

      if attributes.has_key?(:'CCSApproval')
        self.ccs_approval = attributes[:'CCSApproval']
      end

      if attributes.has_key?(:'Address')
        self.address = attributes[:'Address']
      end

      if attributes.has_key?(:'Contact')
        self.contact = attributes[:'Contact']
      end

      if attributes.has_key?(:'Financial')
        self.financial = attributes[:'Financial']
      end

      if attributes.has_key?(:'Fees')
        self.fees = attributes[:'Fees']
      end

      if attributes.has_key?(:'Trustee')
        self.trustee = attributes[:'Trustee']
      end

      if attributes.has_key?(:'ExternalManagement')
        self.external_management = attributes[:'ExternalManagement']
      end

      if attributes.has_key?(:'ServiceLocationOfRecord')
        self.service_location_of_record = attributes[:'ServiceLocationOfRecord']
      end

      if attributes.has_key?(:'ServiceStopOperating')
        self.service_stop_operating = attributes[:'ServiceStopOperating']
      end

      if attributes.has_key?(:'ServiceTemporarilyCeasing')
        self.service_temporarily_ceasing = attributes[:'ServiceTemporarilyCeasing']
      end

      if attributes.has_key?(:'Notifications')
        self.notifications = attributes[:'Notifications']
      end

      if attributes.has_key?(:'SeriousIncident')
        self.serious_incident = attributes[:'SeriousIncident']
      end

      if attributes.has_key?(:'SupportingDocuments')
        self.supporting_documents = attributes[:'SupportingDocuments']
      end

      if attributes.has_key?(:'ApprovalConditions')
        self.approval_conditions = attributes[:'ApprovalConditions']
      end

      if attributes.has_key?(:'ACCSCapPercentage')
        self.accs_cap_percentage = attributes[:'ACCSCapPercentage']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@service_id.nil? && @service_id.to_s.length > 10
        invalid_properties.push('invalid value for "service_id", the character length must be smaller than or equal to 10.')
      end

      if !@start_date.nil? && @start_date.to_s.length > 10
        invalid_properties.push('invalid value for "start_date", the character length must be smaller than or equal to 10.')
      end

      if !@end_date.nil? && @end_date.to_s.length > 10
        invalid_properties.push('invalid value for "end_date", the character length must be smaller than or equal to 10.')
      end

      if !@service_name.nil? && @service_name.to_s.length > 120
        invalid_properties.push('invalid value for "service_name", the character length must be smaller than or equal to 120.')
      end

      if !@service_name_start_date.nil? && @service_name_start_date.to_s.length > 10
        invalid_properties.push('invalid value for "service_name_start_date", the character length must be smaller than or equal to 10.')
      end

      if !@service_name_end_date.nil? && @service_name_end_date.to_s.length > 10
        invalid_properties.push('invalid value for "service_name_end_date", the character length must be smaller than or equal to 10.')
      end

      if !@service_type.nil? && @service_type.to_s.length > 6
        invalid_properties.push('invalid value for "service_type", the character length must be smaller than or equal to 6.')
      end

      if !@commencement_date.nil? && @commencement_date.to_s.length > 10
        invalid_properties.push('invalid value for "commencement_date", the character length must be smaller than or equal to 10.')
      end

      if !@acecqa_registration_code.nil? && @acecqa_registration_code.to_s.length > 11
        invalid_properties.push('invalid value for "acecqa_registration_code", the character length must be smaller than or equal to 11.')
      end

      if !@acecq_aexemptionreason.nil? && @acecq_aexemptionreason.to_s.length > 6
        invalid_properties.push('invalid value for "acecq_aexemptionreason", the character length must be smaller than or equal to 6.')
      end

      if !@number_of_weeks_per_year_date_of_event.nil? && @number_of_weeks_per_year_date_of_event.to_s.length > 10
        invalid_properties.push('invalid value for "number_of_weeks_per_year_date_of_event", the character length must be smaller than or equal to 10.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@service_id.nil? && @service_id.to_s.length > 10
      return false if !@start_date.nil? && @start_date.to_s.length > 10
      return false if !@end_date.nil? && @end_date.to_s.length > 10
      return false if !@service_name.nil? && @service_name.to_s.length > 120
      return false if !@service_name_start_date.nil? && @service_name_start_date.to_s.length > 10
      return false if !@service_name_end_date.nil? && @service_name_end_date.to_s.length > 10
      return false if !@service_type.nil? && @service_type.to_s.length > 6
      return false if !@commencement_date.nil? && @commencement_date.to_s.length > 10
      return false if !@acecqa_registration_code.nil? && @acecqa_registration_code.to_s.length > 11
      return false if !@acecq_aexemptionreason.nil? && @acecq_aexemptionreason.to_s.length > 6
      return false if !@number_of_weeks_per_year_date_of_event.nil? && @number_of_weeks_per_year_date_of_event.to_s.length > 10
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] service_id Value to be assigned
    def service_id=(service_id)
      if !service_id.nil? && service_id.to_s.length > 10
        fail ArgumentError, 'invalid value for "service_id", the character length must be smaller than or equal to 10.'
      end

      @service_id = service_id
    end

    # Custom attribute writer method with validation
    # @param [Object] start_date Value to be assigned
    def start_date=(start_date)
      if !start_date.nil? && start_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "start_date", the character length must be smaller than or equal to 10.'
      end

      @start_date = start_date
    end

    # Custom attribute writer method with validation
    # @param [Object] end_date Value to be assigned
    def end_date=(end_date)
      if !end_date.nil? && end_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "end_date", the character length must be smaller than or equal to 10.'
      end

      @end_date = end_date
    end

    # Custom attribute writer method with validation
    # @param [Object] service_name Value to be assigned
    def service_name=(service_name)
      if !service_name.nil? && service_name.to_s.length > 120
        fail ArgumentError, 'invalid value for "service_name", the character length must be smaller than or equal to 120.'
      end

      @service_name = service_name
    end

    # Custom attribute writer method with validation
    # @param [Object] service_name_start_date Value to be assigned
    def service_name_start_date=(service_name_start_date)
      if !service_name_start_date.nil? && service_name_start_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "service_name_start_date", the character length must be smaller than or equal to 10.'
      end

      @service_name_start_date = service_name_start_date
    end

    # Custom attribute writer method with validation
    # @param [Object] service_name_end_date Value to be assigned
    def service_name_end_date=(service_name_end_date)
      if !service_name_end_date.nil? && service_name_end_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "service_name_end_date", the character length must be smaller than or equal to 10.'
      end

      @service_name_end_date = service_name_end_date
    end

    # Custom attribute writer method with validation
    # @param [Object] service_type Value to be assigned
    def service_type=(service_type)
      if !service_type.nil? && service_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "service_type", the character length must be smaller than or equal to 6.'
      end

      @service_type = service_type
    end

    # Custom attribute writer method with validation
    # @param [Object] commencement_date Value to be assigned
    def commencement_date=(commencement_date)
      if !commencement_date.nil? && commencement_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "commencement_date", the character length must be smaller than or equal to 10.'
      end

      @commencement_date = commencement_date
    end

    # Custom attribute writer method with validation
    # @param [Object] acecqa_registration_code Value to be assigned
    def acecqa_registration_code=(acecqa_registration_code)
      if !acecqa_registration_code.nil? && acecqa_registration_code.to_s.length > 11
        fail ArgumentError, 'invalid value for "acecqa_registration_code", the character length must be smaller than or equal to 11.'
      end

      @acecqa_registration_code = acecqa_registration_code
    end

    # Custom attribute writer method with validation
    # @param [Object] acecq_aexemptionreason Value to be assigned
    def acecq_aexemptionreason=(acecq_aexemptionreason)
      if !acecq_aexemptionreason.nil? && acecq_aexemptionreason.to_s.length > 6
        fail ArgumentError, 'invalid value for "acecq_aexemptionreason", the character length must be smaller than or equal to 6.'
      end

      @acecq_aexemptionreason = acecq_aexemptionreason
    end

    # Custom attribute writer method with validation
    # @param [Object] number_of_weeks_per_year_date_of_event Value to be assigned
    def number_of_weeks_per_year_date_of_event=(number_of_weeks_per_year_date_of_event)
      if !number_of_weeks_per_year_date_of_event.nil? && number_of_weeks_per_year_date_of_event.to_s.length > 10
        fail ArgumentError, 'invalid value for "number_of_weeks_per_year_date_of_event", the character length must be smaller than or equal to 10.'
      end

      @number_of_weeks_per_year_date_of_event = number_of_weeks_per_year_date_of_event
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          service_id == o.service_id &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          service_name == o.service_name &&
          service_name_start_date == o.service_name_start_date &&
          service_name_end_date == o.service_name_end_date &&
          service_type == o.service_type &&
          commencement_date == o.commencement_date &&
          acecqa_registration_code == o.acecqa_registration_code &&
          acecq_aexemptionreason == o.acecq_aexemptionreason &&
          number_of_weeks_per_year == o.number_of_weeks_per_year &&
          number_of_weeks_per_year_date_of_event == o.number_of_weeks_per_year_date_of_event &&
          child_care_places == o.child_care_places &&
          service_name == o.service_name &&
          ccs_approval == o.ccs_approval &&
          address == o.address &&
          contact == o.contact &&
          financial == o.financial &&
          fees == o.fees &&
          trustee == o.trustee &&
          external_management == o.external_management &&
          service_location_of_record == o.service_location_of_record &&
          service_stop_operating == o.service_stop_operating &&
          service_temporarily_ceasing == o.service_temporarily_ceasing &&
          notifications == o.notifications &&
          serious_incident == o.serious_incident &&
          supporting_documents == o.supporting_documents &&
          approval_conditions == o.approval_conditions &&
          accs_cap_percentage == o.accs_cap_percentage
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [service_id, start_date, end_date, service_name, service_name_start_date, service_name_end_date, service_type, commencement_date, acecqa_registration_code, acecq_aexemptionreason, number_of_weeks_per_year, number_of_weeks_per_year_date_of_event, child_care_places, service_name, ccs_approval, address, contact, financial, fees, trustee, external_management, service_location_of_record, service_stop_operating, service_temporarily_ceasing, notifications, serious_incident, supporting_documents, approval_conditions, accs_cap_percentage].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AccountManagementService.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end

end
