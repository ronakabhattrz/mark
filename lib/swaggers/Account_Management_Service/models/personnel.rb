=begin
#CCITS Service Profile

#The **Service Profile** service is used to read and update the following details of the given  Service Profile. - Address - ServiceName(Read Only)     - CCSApproval(Read Only) - Contact   - Declaration   - ExternalManagement   - Fees  - Financial  - OperationAcrossBorders   - Other(Update Only)  - ServiceLocationOfRecord - ServiceStopOperating((Update Only)  - ServiceStopOperatingSale(Update Only) - ServiceTemporarilyCeasing  - SupportingDocuments  - Trustee  

OpenAPI spec version: 2.04

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module AccountManagementService
  class Personnel
	include ActiveModel::Model
    # Person ID of the personnel
    attr_accessor :person_id

    # Firstname of the personnel
    attr_accessor :first_name

    # Lastname of the personnel
    attr_accessor :last_name

    # Date education session must be completed by
    attr_accessor :date_education_to_be_completed

    # Restriction type
    attr_accessor :restriction_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'person_id' => :'personID',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'date_education_to_be_completed' => :'dateEducationToBeCompleted',
        :'restriction_type' => :'restrictionType'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'person_id' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'date_education_to_be_completed' => :'String',
        :'restriction_type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'personID')
        self.person_id = attributes[:'personID']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'dateEducationToBeCompleted')
        self.date_education_to_be_completed = attributes[:'dateEducationToBeCompleted']
      end

      if attributes.has_key?(:'restrictionType')
        self.restriction_type = attributes[:'restrictionType']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@person_id.nil? && @person_id.to_s.length > 20
        invalid_properties.push('invalid value for "person_id", the character length must be smaller than or equal to 20.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 40
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 40.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 40
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 40.')
      end

      if !@date_education_to_be_completed.nil? && @date_education_to_be_completed.to_s.length > 10
        invalid_properties.push('invalid value for "date_education_to_be_completed", the character length must be smaller than or equal to 10.')
      end

      if !@restriction_type.nil? && @restriction_type.to_s.length > 1000
        invalid_properties.push('invalid value for "restriction_type", the character length must be smaller than or equal to 1000.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@person_id.nil? && @person_id.to_s.length > 20
      return false if !@first_name.nil? && @first_name.to_s.length > 40
      return false if !@last_name.nil? && @last_name.to_s.length > 40
      return false if !@date_education_to_be_completed.nil? && @date_education_to_be_completed.to_s.length > 10
      return false if !@restriction_type.nil? && @restriction_type.to_s.length > 1000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] person_id Value to be assigned
    def person_id=(person_id)
      if !person_id.nil? && person_id.to_s.length > 20
        fail ArgumentError, 'invalid value for "person_id", the character length must be smaller than or equal to 20.'
      end

      @person_id = person_id
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 40
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 40.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 40
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 40.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] date_education_to_be_completed Value to be assigned
    def date_education_to_be_completed=(date_education_to_be_completed)
      if !date_education_to_be_completed.nil? && date_education_to_be_completed.to_s.length > 10
        fail ArgumentError, 'invalid value for "date_education_to_be_completed", the character length must be smaller than or equal to 10.'
      end

      @date_education_to_be_completed = date_education_to_be_completed
    end

    # Custom attribute writer method with validation
    # @param [Object] restriction_type Value to be assigned
    def restriction_type=(restriction_type)
      if !restriction_type.nil? && restriction_type.to_s.length > 1000
        fail ArgumentError, 'invalid value for "restriction_type", the character length must be smaller than or equal to 1000.'
      end

      @restriction_type = restriction_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          person_id == o.person_id &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          date_education_to_be_completed == o.date_education_to_be_completed &&
          restriction_type == o.restriction_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [person_id, first_name, last_name, date_education_to_be_completed, restriction_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AccountManagementService.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end

end
