=begin
#CCITS Service Profile

#The **Service Profile** service is used to read and update the following details of the given  Service Profile. - Address - ServiceName(Read Only)     - CCSApproval(Read Only) - Contact   - Declaration   - ExternalManagement   - Fees  - Financial  - OperationAcrossBorders   - Other(Update Only)  - ServiceLocationOfRecord - ServiceStopOperating((Update Only)  - ServiceStopOperatingSale(Update Only) - ServiceTemporarilyCeasing  - SupportingDocuments  - Trustee  

OpenAPI spec version: 2.04

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module AccountManagementService
  class ExternalManagement
	include ActiveModel::Model
    # Start Date for the update
    attr_accessor :start_date

    # End Date for the update
    attr_accessor :end_date

    # Action for this External Management
    attr_accessor :action

    # Service External Management type
    attr_accessor :type

    # Service External Management Name
    attr_accessor :name

    # Service External Management First Name
    attr_accessor :first_name

    # Service External Management Last Name
    attr_accessor :last_name

    # Service External Management ABN
    attr_accessor :abn

    # External Management Name as stored by the ABR
    attr_accessor :abr_name

    # External Management ACN
    attr_accessor :acn

    # External Management email address
    attr_accessor :email

    # External Management telephone number
    attr_accessor :phone

    # Details of the arrangement Service will have in place
    attr_accessor :arrangement

    attr_accessor :address

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'action' => :'action',
        :'type' => :'type',
        :'name' => :'name',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'abn' => :'ABN',
        :'abr_name' => :'ABRName',
        :'acn' => :'ACN',
        :'email' => :'email',
        :'phone' => :'phone',
        :'arrangement' => :'arrangement',
        :'address' => :'Address'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'start_date' => :'String',
        :'end_date' => :'String',
        :'action' => :'String',
        :'type' => :'String',
        :'name' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'abn' => :'String',
        :'abr_name' => :'String',
        :'acn' => :'String',
        :'email' => :'String',
        :'phone' => :'String',
        :'arrangement' => :'String',
        :'address' => :'RelatedCollectionAddress'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'endDate')
        self.end_date = attributes[:'endDate']
      end

      if attributes.has_key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'ABN')
        self.abn = attributes[:'ABN']
      end

      if attributes.has_key?(:'ABRName')
        self.abr_name = attributes[:'ABRName']
      end

      if attributes.has_key?(:'ACN')
        self.acn = attributes[:'ACN']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.has_key?(:'arrangement')
        self.arrangement = attributes[:'arrangement']
      end

      if attributes.has_key?(:'Address')
        self.address = attributes[:'Address']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@start_date.nil? && @start_date.to_s.length > 10
        invalid_properties.push('invalid value for "start_date", the character length must be smaller than or equal to 10.')
      end

      if !@end_date.nil? && @end_date.to_s.length > 10
        invalid_properties.push('invalid value for "end_date", the character length must be smaller than or equal to 10.')
      end

      if !@action.nil? && @action.to_s.length > 2
        invalid_properties.push('invalid value for "action", the character length must be smaller than or equal to 2.')
      end

      if !@type.nil? && @type.to_s.length > 6
        invalid_properties.push('invalid value for "type", the character length must be smaller than or equal to 6.')
      end

      if !@name.nil? && @name.to_s.length > 120
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 120.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 40
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 40.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 40
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 40.')
      end

      if !@abn.nil? && @abn.to_s.length > 11
        invalid_properties.push('invalid value for "abn", the character length must be smaller than or equal to 11.')
      end

      if !@abr_name.nil? && @abr_name.to_s.length > 120
        invalid_properties.push('invalid value for "abr_name", the character length must be smaller than or equal to 120.')
      end

      if !@acn.nil? && @acn.to_s.length > 9
        invalid_properties.push('invalid value for "acn", the character length must be smaller than or equal to 9.')
      end

      if !@email.nil? && @email.to_s.length > 241
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 241.')
      end

      if !@phone.nil? && @phone.to_s.length > 30
        invalid_properties.push('invalid value for "phone", the character length must be smaller than or equal to 30.')
      end

      if !@arrangement.nil? && @arrangement.to_s.length > 5000
        invalid_properties.push('invalid value for "arrangement", the character length must be smaller than or equal to 5000.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@start_date.nil? && @start_date.to_s.length > 10
      return false if !@end_date.nil? && @end_date.to_s.length > 10
      return false if !@action.nil? && @action.to_s.length > 2
      return false if !@type.nil? && @type.to_s.length > 6
      return false if !@name.nil? && @name.to_s.length > 120
      return false if !@first_name.nil? && @first_name.to_s.length > 40
      return false if !@last_name.nil? && @last_name.to_s.length > 40
      return false if !@abn.nil? && @abn.to_s.length > 11
      return false if !@abr_name.nil? && @abr_name.to_s.length > 120
      return false if !@acn.nil? && @acn.to_s.length > 9
      return false if !@email.nil? && @email.to_s.length > 241
      return false if !@phone.nil? && @phone.to_s.length > 30
      return false if !@arrangement.nil? && @arrangement.to_s.length > 5000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] start_date Value to be assigned
    def start_date=(start_date)
      if !start_date.nil? && start_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "start_date", the character length must be smaller than or equal to 10.'
      end

      @start_date = start_date
    end

    # Custom attribute writer method with validation
    # @param [Object] end_date Value to be assigned
    def end_date=(end_date)
      if !end_date.nil? && end_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "end_date", the character length must be smaller than or equal to 10.'
      end

      @end_date = end_date
    end

    # Custom attribute writer method with validation
    # @param [Object] action Value to be assigned
    def action=(action)
      if !action.nil? && action.to_s.length > 2
        fail ArgumentError, 'invalid value for "action", the character length must be smaller than or equal to 2.'
      end

      @action = action
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if !type.nil? && type.to_s.length > 6
        fail ArgumentError, 'invalid value for "type", the character length must be smaller than or equal to 6.'
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 120
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 120.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 40
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 40.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 40
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 40.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method with validation
    # @param [Object] abn Value to be assigned
    def abn=(abn)
      if !abn.nil? && abn.to_s.length > 11
        fail ArgumentError, 'invalid value for "abn", the character length must be smaller than or equal to 11.'
      end

      @abn = abn
    end

    # Custom attribute writer method with validation
    # @param [Object] abr_name Value to be assigned
    def abr_name=(abr_name)
      if !abr_name.nil? && abr_name.to_s.length > 120
        fail ArgumentError, 'invalid value for "abr_name", the character length must be smaller than or equal to 120.'
      end

      @abr_name = abr_name
    end

    # Custom attribute writer method with validation
    # @param [Object] acn Value to be assigned
    def acn=(acn)
      if !acn.nil? && acn.to_s.length > 9
        fail ArgumentError, 'invalid value for "acn", the character length must be smaller than or equal to 9.'
      end

      @acn = acn
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 241
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 241.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] phone Value to be assigned
    def phone=(phone)
      if !phone.nil? && phone.to_s.length > 30
        fail ArgumentError, 'invalid value for "phone", the character length must be smaller than or equal to 30.'
      end

      @phone = phone
    end

    # Custom attribute writer method with validation
    # @param [Object] arrangement Value to be assigned
    def arrangement=(arrangement)
      if !arrangement.nil? && arrangement.to_s.length > 5000
        fail ArgumentError, 'invalid value for "arrangement", the character length must be smaller than or equal to 5000.'
      end

      @arrangement = arrangement
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          action == o.action &&
          type == o.type &&
          name == o.name &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          abn == o.abn &&
          abr_name == o.abr_name &&
          acn == o.acn &&
          email == o.email &&
          phone == o.phone &&
          arrangement == o.arrangement &&
          address == o.address
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [start_date, end_date, action, type, name, first_name, last_name, abn, abr_name, acn, email, phone, arrangement, address].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AccountManagementService.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end

end
