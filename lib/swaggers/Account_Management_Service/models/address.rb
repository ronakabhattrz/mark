=begin
#CCITS Service Profile

#The **Service Profile** service is used to read and update the following details of the given  Service Profile. - Address - ServiceName(Read Only)     - CCSApproval(Read Only) - Contact   - Declaration   - ExternalManagement   - Fees  - Financial  - OperationAcrossBorders   - Other(Update Only)  - ServiceLocationOfRecord - ServiceStopOperating((Update Only)  - ServiceStopOperatingSale(Update Only) - ServiceTemporarilyCeasing  - SupportingDocuments  - Trustee  

OpenAPI spec version: 2.04

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module AccountManagementService
  class Address
	include ActiveModel::Model
    # Type of Address
    attr_accessor :type

    # Address line 1
    attr_accessor :street_line1

    # Address line 2
    attr_accessor :street_line2

    # Address suburb
    attr_accessor :suburb

    # Address state
    attr_accessor :state

    # address postcode
    attr_accessor :postcode

    # The validity start date of this Address
    attr_accessor :start_date

    # The validity end date of this Address
    attr_accessor :end_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'street_line1' => :'streetLine1',
        :'street_line2' => :'streetLine2',
        :'suburb' => :'suburb',
        :'state' => :'state',
        :'postcode' => :'postcode',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'type' => :'String',
        :'street_line1' => :'String',
        :'street_line2' => :'String',
        :'suburb' => :'String',
        :'state' => :'String',
        :'postcode' => :'String',
        :'start_date' => :'String',
        :'end_date' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'streetLine1')
        self.street_line1 = attributes[:'streetLine1']
      end

      if attributes.has_key?(:'streetLine2')
        self.street_line2 = attributes[:'streetLine2']
      end

      if attributes.has_key?(:'suburb')
        self.suburb = attributes[:'suburb']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'postcode')
        self.postcode = attributes[:'postcode']
      end

      if attributes.has_key?(:'startDate')
        self.start_date = attributes[:'startDate']
      end

      if attributes.has_key?(:'endDate')
        self.end_date = attributes[:'endDate']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@type.nil? && @type.to_s.length > 10
        invalid_properties.push('invalid value for "type", the character length must be smaller than or equal to 10.')
      end

      if !@street_line1.nil? && @street_line1.to_s.length > 60
        invalid_properties.push('invalid value for "street_line1", the character length must be smaller than or equal to 60.')
      end

      if !@street_line2.nil? && @street_line2.to_s.length > 40
        invalid_properties.push('invalid value for "street_line2", the character length must be smaller than or equal to 40.')
      end

      if !@suburb.nil? && @suburb.to_s.length > 40
        invalid_properties.push('invalid value for "suburb", the character length must be smaller than or equal to 40.')
      end

      if !@state.nil? && @state.to_s.length > 3
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 3.')
      end

      if !@postcode.nil? && @postcode.to_s.length > 4
        invalid_properties.push('invalid value for "postcode", the character length must be smaller than or equal to 4.')
      end

      if !@start_date.nil? && @start_date.to_s.length > 10
        invalid_properties.push('invalid value for "start_date", the character length must be smaller than or equal to 10.')
      end

      if !@end_date.nil? && @end_date.to_s.length > 10
        invalid_properties.push('invalid value for "end_date", the character length must be smaller than or equal to 10.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@type.nil? && @type.to_s.length > 10
      return false if !@street_line1.nil? && @street_line1.to_s.length > 60
      return false if !@street_line2.nil? && @street_line2.to_s.length > 40
      return false if !@suburb.nil? && @suburb.to_s.length > 40
      return false if !@state.nil? && @state.to_s.length > 3
      return false if !@postcode.nil? && @postcode.to_s.length > 4
      return false if !@start_date.nil? && @start_date.to_s.length > 10
      return false if !@end_date.nil? && @end_date.to_s.length > 10
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      if !type.nil? && type.to_s.length > 10
        fail ArgumentError, 'invalid value for "type", the character length must be smaller than or equal to 10.'
      end

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] street_line1 Value to be assigned
    def street_line1=(street_line1)
      if !street_line1.nil? && street_line1.to_s.length > 60
        fail ArgumentError, 'invalid value for "street_line1", the character length must be smaller than or equal to 60.'
      end

      @street_line1 = street_line1
    end

    # Custom attribute writer method with validation
    # @param [Object] street_line2 Value to be assigned
    def street_line2=(street_line2)
      if !street_line2.nil? && street_line2.to_s.length > 40
        fail ArgumentError, 'invalid value for "street_line2", the character length must be smaller than or equal to 40.'
      end

      @street_line2 = street_line2
    end

    # Custom attribute writer method with validation
    # @param [Object] suburb Value to be assigned
    def suburb=(suburb)
      if !suburb.nil? && suburb.to_s.length > 40
        fail ArgumentError, 'invalid value for "suburb", the character length must be smaller than or equal to 40.'
      end

      @suburb = suburb
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 3
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 3.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] postcode Value to be assigned
    def postcode=(postcode)
      if !postcode.nil? && postcode.to_s.length > 4
        fail ArgumentError, 'invalid value for "postcode", the character length must be smaller than or equal to 4.'
      end

      @postcode = postcode
    end

    # Custom attribute writer method with validation
    # @param [Object] start_date Value to be assigned
    def start_date=(start_date)
      if !start_date.nil? && start_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "start_date", the character length must be smaller than or equal to 10.'
      end

      @start_date = start_date
    end

    # Custom attribute writer method with validation
    # @param [Object] end_date Value to be assigned
    def end_date=(end_date)
      if !end_date.nil? && end_date.to_s.length > 10
        fail ArgumentError, 'invalid value for "end_date", the character length must be smaller than or equal to 10.'
      end

      @end_date = end_date
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          street_line1 == o.street_line1 &&
          street_line2 == o.street_line2 &&
          suburb == o.suburb &&
          state == o.state &&
          postcode == o.postcode &&
          start_date == o.start_date &&
          end_date == o.end_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, street_line1, street_line2, suburb, state, postcode, start_date, end_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AccountManagementService.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end

end
