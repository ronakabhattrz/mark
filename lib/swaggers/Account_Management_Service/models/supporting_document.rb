=begin
#CCITS Service Profile

#The **Service Profile** service is used to read and update the following details of the given  Service Profile. - Address - ServiceName(Read Only)     - CCSApproval(Read Only) - Contact   - Declaration   - ExternalManagement   - Fees  - Financial  - OperationAcrossBorders   - Other(Update Only)  - ServiceLocationOfRecord - ServiceStopOperating((Update Only)  - ServiceStopOperatingSale(Update Only) - ServiceTemporarilyCeasing  - SupportingDocuments  - Trustee  

OpenAPI spec version: 2.04

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module AccountManagementService
  class SupportingDocument
	include ActiveModel::Model
    # Document Type
    attr_accessor :document_type

    # File Name
    attr_accessor :file_name

    # MIME Type
    attr_accessor :mime_type

    # File Content
    attr_accessor :file_content

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'document_type' => :'documentType',
        :'file_name' => :'fileName',
        :'mime_type' => :'MIMEType',
        :'file_content' => :'fileContent'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'document_type' => :'String',
        :'file_name' => :'String',
        :'mime_type' => :'String',
        :'file_content' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'documentType')
        self.document_type = attributes[:'documentType']
      end

      if attributes.has_key?(:'fileName')
        self.file_name = attributes[:'fileName']
      end

      if attributes.has_key?(:'MIMEType')
        self.mime_type = attributes[:'MIMEType']
      end

      if attributes.has_key?(:'fileContent')
        self.file_content = attributes[:'fileContent']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@document_type.nil? && @document_type.to_s.length > 6
        invalid_properties.push('invalid value for "document_type", the character length must be smaller than or equal to 6.')
      end

      if !@file_name.nil? && @file_name.to_s.length > 250
        invalid_properties.push('invalid value for "file_name", the character length must be smaller than or equal to 250.')
      end

      if !@mime_type.nil? && @mime_type.to_s.length > 6
        invalid_properties.push('invalid value for "mime_type", the character length must be smaller than or equal to 6.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@document_type.nil? && @document_type.to_s.length > 6
      return false if !@file_name.nil? && @file_name.to_s.length > 250
      return false if !@mime_type.nil? && @mime_type.to_s.length > 6
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] document_type Value to be assigned
    def document_type=(document_type)
      if !document_type.nil? && document_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "document_type", the character length must be smaller than or equal to 6.'
      end

      @document_type = document_type
    end

    # Custom attribute writer method with validation
    # @param [Object] file_name Value to be assigned
    def file_name=(file_name)
      if !file_name.nil? && file_name.to_s.length > 250
        fail ArgumentError, 'invalid value for "file_name", the character length must be smaller than or equal to 250.'
      end

      @file_name = file_name
    end

    # Custom attribute writer method with validation
    # @param [Object] mime_type Value to be assigned
    def mime_type=(mime_type)
      if !mime_type.nil? && mime_type.to_s.length > 6
        fail ArgumentError, 'invalid value for "mime_type", the character length must be smaller than or equal to 6.'
      end

      @mime_type = mime_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          document_type == o.document_type &&
          file_name == o.file_name &&
          mime_type == o.mime_type &&
          file_content == o.file_content
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [document_type, file_name, mime_type, file_content].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AccountManagementService.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end

end
